## GIT Commands -

-> Initial Setup:
	> configure "username" & "email"
		- (git config : This command sets the author name and email address respectively to be used with your commits)
		- Syntax:
			$ git config --global user.name "<username>"
			$ git config --global user.email "<email>"

		- (git status: The git status command displays the state of the working directory and the staging area)
		- Syntax: 
			$ git status

-> Set Personal Access Token on Windows : "https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to"

-> Basic Commands:
	1) git init: 
		- This command initialize a new, empty GIT repository
		- It generates a folder as ".git" which is by default hidden
		- Syntax: 
			$ git init

	2) git add:
		- This command adds a change in the working directory to the staging area. 
		- It tells Git that you want to include updates to a particular file in the next commit.
		- One can add single or multiple Files.
		- Syntax: 
			$ git add . 												(add all files in the project folder)
			$ git add <path/filename> 									(add single file)
			$ git add -- . ':!<path/filename>' ':!<path/filename>' ...	(add all files except one/two)	[git bash]
			$ git add -- . :!<path/filename> :!<path/filename> ...		(add all files except one/two)	[cmd]

	3) git commit: 
		- In Git, commit is the term used for saving changes. 
		- Git does not add changes to a commit automatically. 
		- You need to indicate which file and changes need to be saved before running the git commit command. 
		- Syntax: 
			$ git commit -m "<commit_message>"

	4) git remote:
		- This command is used to connect your local repository to the remote repository.
		- Syntax: 
			$ git remote add <variable_name> <remote_server_link>
		- Eg.:
			$ git remote add origin master/main	
			
	# Optional Step:   
		- Github recently renamed master branch as main branch
		- In git bash if it is still showing master branch, then rename it
		- $ git branch -m master main
		OR
		- Rename master to main on github itself and follow the remaining steps as it is

	5) git pull:
		- This command fetches and merges changes from a remote repository and immediately update the local repository
		- Syntax: 
			$ git pull <variable_name> <branch_name>
		- Eg.:
			$ git pull origin master/main

	6) git push: 
		- This command is used to upload local repository changes to a remote repository
		- If remote repository is ahead of local changes, then we need to first pull changes before pushing them from local
		- Syntax: 
			$ git push -u <variable_name> <branch_name>	(creates an upstream for the first push from local repository)
			$ git push 									(consecutive pushes for the given branch can be done using this command only)
		- Eg.:
			$ git push origin master/main
			$ git push

	7) git stash:
		- It temporarily stores changes you've made in your working directory so you can work on something else, and then come back and re-apply them later.
		- Syntax: 
			$ git stash

	8) git stash pop/apply: 
		- Popping your stash removes the changes from your stash and reapplies them to your working copy
		- Reapply the changes to working copy and also keep them in the stash
		- Syntax: 
			$ git stash pop
			$ git stash apply
			
	9) git reset:
		- It is a powerful command that is used to undo local changes to the state of a git repository
		- This command is used to undo staged changes
		- This command should be used with caution
		- Syntax:
			$ git reset <path/filename> (changes remains as it is just the files are removed from git add)
			$ git reset --soft HEAD~ 	(Changes remains as it is just the files are removed from git commit)
			
	10) git clone:
		- It is used to target an existing repository and create a clone, or copy of the target repository locally on device.
		- Syntax: 
			$ git clone <repo HTTP/SSH url>

	11) git checkout: 
		- It is used to switch between branches of same repository.
		- Syntax: 
			$ git checkout -b <branch name>		(creates new branch from the current branch)
			$ git checkout <branch_name>		(switches to another branch from current branch)

	12) git log: 
		- It is used to review and read history of everything that happens to a repository.
		- Syntax: 
			$ git log
			
	13) List all branches with author name: 
		- Syntax:
			$ git for-each-ref --sort=authorname --format "%(authorname) %(refname)"
	
	14) Branches created by me (with latest commit message): 
		Syntax:
			$ git branch -r | xargs -L1 git --no-pager show -s --oneline --author="$(git config user.name)"

	15) Track remote branch & add to your local: 
		Syntax:
			$ git fetch -> git switch <remote_branch_name>

	16) Merge particular commit to a branch: 
		Syntax:
			$ git cherry-pick <commit-hash>

	17) Merge specific files/folder from one branch to another:
		Syntax:
			-> checkout to the branch where you need the changes: $ git checkout <branch1>
			-> merge changes from branch2 to branch1: $ git checkout --patch branch2 <file_path>/<folder_path>
			
	## Update Git Password (Not Gitlab password)
		- Stage 1:
			> git config --global --unset user.password
			> git pull
			> It will prompt for password : Enter personal access token (.m2/setting.xml or create a new one from gitlab)

		- Stage 2: (in case it asks for username and password each time a git push or pull operation is performed)
			> git config --global credential.helper store (this might store the password as plain text in some git config file on disk)

		- Stage 3: (if the Window Credential or OpenSSH window appear each time a git push or pull operation is performed)
			> git config --edit --global
				-> the above command opens the gitconfig file
				-> add
					[core]
						askpass = 
						
			> git config --edit --global
				-> the above command also opens a gitconfig file
				-> remove helper = manager/manager-core line